#!/usr/bin/env bash

# This variables can be put all into .env file maybe changin their name.
OWNER=thymbahutymba
IMAGE=obfs4-bridge

if [ ! "${GITHUB_TOKEN}" ];
then
	echo "GITHUB_TOKEN variable needs to be defined before run the script"
	exit 1
fi

JSON=$(wget -qO- https://registry.hub.docker.com/v2/repositories/${OWNER}/${IMAGE}/tags)
ARCHS=("amd64" "arm64" "arm")

# Version greater
version_gt() {
	# Whether the image is already at the latest version no update is required
	if [ "$1" = "$2" ];
	then
		return 1
	fi

	[  "$1" = "$(echo -e "$1\n$2" | sort -V | tail -n1)" ]
}

# Check if there is new version available for given architecture
new_version_for () {
	if [ $# -ne 2 ];
	then
		echo "check_new_version_for requires the arch and the variable to return the latest version."
		exit 1
	elif [[ ! ${ARCHS[@]} =~ $1 ]];
	then
		echo "Architecture "$1" not supported. [" ${ARCHS[@]} "]"
		exit 1
	fi

	# Get the digest of all images in latest manifest
	DIGEST=$(jq -r '.results[] | select(.name=="latest") | .images[] | select(.architecture=="'$1'") | .digest' <<< ${JSON})
	NAME=$(jq -r '.results[] | select(.images[].digest=="'"${DIGEST}"'" and select(.name | test("(-[0-9])"))) | .name' <<< ${JSON})
	DOCKER_VERSION=$(sed 's/'$1'-//' <<< ${NAME})

	: "
	Since tor 0.4.3.x, the binary Debian packages on deb.torproject.org  will 
	not anymore provided. Therefore, the debian repository has been chosen, in 
	order to continue to have docker images for arm architecture.

	Moreover, in order to detect whether newer tor version is available, apt is 
	used. Finally, in order to keep the script independent from the platform in
	which is executed, docker is used to detect for newer version. 
	"
	if [ "$1" = "arm" ];
	then
		docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 1> /dev/null
		LATEST_VERSION=$(docker run --rm -it arm32v7/debian:bullseye-slim bash -c \
			"apt-get update 1> /dev/null && \
			apt-cache show tor" | \
			grep '^Version:' | \
			sed 's/Version: //' | \
			tr -d '\r')
	else
		LATEST_VERSION=$( \
			wget -qO- https://deb.torproject.org/torproject.org/dists/stable/main/binary-$1/Packages | \
			grep -A1 "^Package: tor$" | \
			grep "^Version:" | \
			sed "s/Version: //" | sed "s/~.*//")
	fi

	if version_gt ${LATEST_VERSION} ${DOCKER_VERSION};
	then
		# Return latest version to caller
		eval "$2='${LATEST_VERSION}'"
	fi
}

AMD64_VERSION='-1'
new_version_for "amd64" AMD64_VERSION

ARM64_VERSION='-1'
new_version_for "arm64" ARM64_VERSION

ARM_VERSION='-1'
new_version_for "arm" ARM_VERSION

if [[ ${ARM64_VERSION} = '-1' && ${ARM64_VERSION} = '-1' && ${ARM_VERSION} = '-1' ]];
then
	echo "The docker images are already at the latest version."
	exit 0
fi

# Trigger github in order to test and build the new docker image.
data=$(cat << EOF
{
	"event_type": "new-release", 
	"client_payload": {
		"amd64": "${AMD64_VERSION}",
		"arm64": "${ARM64_VERSION}",
		"arm": "${ARM_VERSION}"
	}
}
EOF
)

curl \
	-H "Accept: application/vnd.github.everest-preview+json" \
	-H "Authorization: token ${GITHUB_TOKEN}" \
	--request POST \
	--data "${data}" \
	https://api.github.com/repos/${OWNER}/docker-${IMAGE}/dispatches